** A function f(n) is said to be growing faster than g(n) for all n>=0,f(n),g(n)>=0 if::
                lim    f(n)/g(n) =inf  here,inf=infinity
                n->inf  

                OR
                lim    g(n)/f(n) =0 here,inf=infinity
                n->inf 
                
** METHODS TO FIND ORDER OF GROWTH::
       1> DIRECT METHOD:
                |_ Ignore lower order terms
                |_ Ignore leading constant

        2> PRIORITY ORDER:
                c < loglog n < log n<(n) ^1/3 < (n)^1/2 < n < n^2 < n^3 < n^4 < 2^n < n^n

    EXAMPLES:
        f(n) = 2n^2 + n + 6
        g(n) = 100n + 3
               Order of graowth of f(n) = n^2
               Order of graowth of g(n) = n
               As the priority ordeer of n^2 > n;
               Order of f(n) > Order of g(n);
               Time taken:(f(n)>g(n))
               Hence,
                   g(n) is better.

    ** When Order of Growth is high, Time taken by algo is high. Hence, preference of that algo is lower. (Bad Algorithm)

** GOOD OR BAD ALGORITHM::
       Find the sum of first n  natural numbers.
      1st method:                                   
          int function1(int n)
          {
              return n*(n+1)/2;//function1()=C1
          }

    2nd method:
          int function2(int n)
          {
              int sum=0;
              for(int i=1;i<=n;i++)//function2()=C2n+C3
              sum=sum+1;
              return sum;
          }

    Order of growth of 1st method: O(1) ... i.e. constant
    Order of growth of 2nd method: O(n) 
           Priority order of c is greater than n.
           Hence,
               Method 1 is  a good Algorithm.



** Best, Average And Worst Cases:->
        * Best Case : constant
        * Average Case : linear + constant -> linear
        * Worst Case : 
